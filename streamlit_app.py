import streamlit as st
import io
import zipfile
from ai_generator import generate_website

# ----------------------------
# Header with a Modern Look
# ----------------------------
header_html = """
<div style="background-image: url('https://images.pexels.com/photos/3184418/pexels-photo-3184418.jpeg');
            background-size: cover; padding: 50px; border-radius: 10px;">
    <h1 style="color: white; text-align: center;">AI-Powered Website Generator</h1>
    <p style="color: white; text-align: center;">Create and preview websites generated by AI</p>
</div>
"""
st.markdown(header_html, unsafe_allow_html=True)

# ----------------------------
# Sidebar: API Key, API Type, and API URL
# ----------------------------
st.sidebar.header("Configuration")
api_type = st.sidebar.selectbox("Select AI Provider", options=["openai", "custom"])
api_key = st.sidebar.text_input("Enter your API Key", type="password")
api_url = None
if api_type == "custom":
    api_url = st.sidebar.text_input("Enter your API Endpoint URL")

st.sidebar.markdown("### History")
# (For a real-world app, store history in st.session_state and show previous prompts here)

# ----------------------------
# Main Input Section
# ----------------------------
st.write("### Describe the website you want to create:")
prompt = st.text_area("Website Description", height=150)

if st.button("Generate Website"):
    if api_type != "custom" and not api_key:
        st.error("Please enter your API Key in the sidebar.")
    elif api_type == "custom" and (not api_url or not api_key):
        st.error("Please provide both API Endpoint URL and API Key for custom API.")
    elif not prompt:
        st.error("Please provide a description for the website.")
    else:
        with st.spinner("Generating website..."):
            try:
                website_files = generate_website(prompt, api_key, api_type=api_type, api_url=api_url)
                st.success("Website generated successfully!")
                
                # ----------------------------
                # Display the Generated Code in Tabs
                # ----------------------------
                tabs = st.tabs(["Preview", "HTML", "CSS", "Download"])
                
                # Preview Tab: Render index.html
                html_code = website_files.get("index.html", "<p>No HTML generated.</p>")
                with tabs[0]:
                    st.components.v1.html(html_code, height=500, scrolling=True)
                
                with tabs[1]:
                    st.code(html_code, language="html")
                
                css_code = website_files.get("style.css", "/* No CSS generated */")
                with tabs[2]:
                    st.code(css_code, language="css")
                
                # Download Tab: Bundle files into a ZIP archive
                with tabs[3]:
                    zip_bytes = io.BytesIO()
                    with zipfile.ZipFile(zip_bytes, mode="w") as zf:
                        zf.writestr("index.html", html_code)
                        zf.writestr("style.css", css_code)
                        # Write script.js if available
                        if "script.js" in website_files:
                            zf.writestr("script.js", website_files["script.js"])
                    zip_bytes.seek(0)
                    st.download_button(
                        label="Download Website as ZIP",
                        data=zip_bytes,
                        file_name="website.zip",
                        mime="application/zip"
                    )
            except Exception as e:
                st.error(f"An error occurred: {e}")
